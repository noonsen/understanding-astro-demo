<button aria-label="Theme Toggler" data-theme-toggle>
    <svg width="25px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path
          class="sun"
          fill-rule="evenodd"
          d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
        ></path>
        <path
          class="moon"
          fill-rule="evenodd"
          d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
        ></path>
      </svg>
</button>

<style>
    [data-theme-toggle] {
      cursor: pointer;
      border-radius: 10px;
      border: solid 1px;
      border-color: rgb(206, 205, 203);
      padding: 5px 10px;
      transition: all 0.2s ease-in-out;
      background: rgba(12, 8, 8, 0.15);
    }
  
    [data-theme-toggle]:hover {
      /* Make the button smaller (scale down) when hovered */
      transform: scale(0.9);
      background: rgba(255, 255, 255, 0.25)

    }
  
    [data-theme-toggle]:active {
      /** Return the button to its standard size when active */
      transform: scale(1);
    }
  
    .sun {
      /* Hide the sun icon by default. This assumes a light theme by default */
      fill: transparent;
    }
      /**...**/

  /** If a parent element has a .dark class, target the .sun icon and make the path black (shows the icon) */
    :global(.dark) .sun {
        fill: rgb(255, 254, 254);
    }

  /** If a parent element has a .dark class, target the .moon icon and make the path transparent (hides the icon) */
    :global(.dark) .moon {
        fill: black;
    }

    :global(.dark) .moon {
        fill: transparent;
    }
    
</style>

<script>
// Define constants for class names and storage keys
const DARK_THEME_CLASS = "dark";  
const COLOUR_MODE = "COLOUR_MODE";
const LIGHT_THEME = "LIGHT";
const DARK_THEME = "DARK";

// Select the theme toggle button and root element
const toggle = document.querySelector("[data-theme-toggle]");
const rootEl = document.documentElement;

// Add event listener to the toggle button
if (toggle) {
  toggle.addEventListener("click", () => {
    // Toggle dark theme class on the root element
    rootEl.classList.toggle(DARK_THEME_CLASS);
    // Determine the current colour mode based on class existence
    const colourMode = rootEl.classList.contains(DARK_THEME_CLASS)
      ? DARK_THEME 
      : LIGHT_THEME;
    // Store the colour mode preference in local storage
    window.localStorage.setItem(COLOUR_MODE, colourMode);
  });
}

// Function to retrieve the initial colour mode preference
const getInitialColourMode = () => {
  // Check if a colour mode preference was previously saved
  const previouslySavedColourMode = window.localStorage.getItem(COLOUR_MODE);
  if (previouslySavedColourMode) {
    return previouslySavedColourMode; // Return the saved mode
  }

  // If no preference was saved, check system preference
  if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
    return DARK_THEME; // Return dark mode if system prefers it
  } 
  return LIGHT_THEME; // Otherwise, return light mode
}

// Retrieve initial colour mode and set it on the root element
const initialColourMode = getInitialColourMode();
const setInitialColourMode = (mode: string) => {
  if (mode === LIGHT_THEME) {
    rootEl.classList.remove(DARK_THEME_CLASS); // Remove dark theme class
  } else {
    rootEl.classList.add(DARK_THEME_CLASS); // Add dark theme class
  }
};
setInitialColourMode(initialColourMode); // Set initial colour mode

  </script>